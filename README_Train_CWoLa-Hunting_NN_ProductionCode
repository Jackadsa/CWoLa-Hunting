Train_CWoLa-Hunting_NN_ProductionCode.py will train the NNs for a single signal region choice. It will save the NNs, and save a variety of plots including:

1) Validation performance during training
2) Scatter plots highlighting the most signal-like events
3) mJJ histograms after making final cuts at varying thresholds, including the calculated p-value as the plot title.

It will also create a .dat file with the bin counts after cuts for external use. It is currently configured to automatically take data from the the /data1/users/jcollins folder on the squirrel cluster.

#######################################

USAGE:

python Train_CWoLa-Hunting_NN_ProductionCode.py -tag1 argument1 -tag2 argument2 ...


#######################################


ARGUMENTS:

-o: output directory and prefix. E.g. -o /data1/users/jcollins/myfolder/myprefix will create files like /data1/users/jcollins/myfolder/myprefix_model1.h5 and /data1/users/jcollins/myfolder/myprefix_scatterplot.png

-sigevnts: number of signal events to draw from the signal events data file. About 55% of these events will fall in the signal region.

-bgevnts: number of bg events to draw from the bg events data files

-signal: 0 or 1, whether to include signal events (1) or do background-only (0)

-bin: which bin to center the signal region on. Currently, the only signal is centered at 3 TeV, which is bin 7. The bins are numbered 0-14. But since the sideband + signal regions total 7 bins wide, only bins 3-11 are available as centers.

-checkeff: Model validation performance is determined by tpr at fixed fpr, where tpr and fpr refer to events in the signal region and sideband region being labelled as signal-region events. the number givin to check_eff is the number used for the fixed fpr. Choose numbers on the order of 0.01.

-kfold: number of kfolds to use. Default is 5.

-it: number of times to repeat training on same training/validation split with different initialization. The best model of these will ultimately be selected.

-bgoffset: If using a subset of bg events, where to start drawing from the bg events data files.

-batchsize: Training batch size

-patience: How many epochs to continue training without improvement in validation performance.

-checkeff: What efficiency threshold to use for checking validation performance

-loadonly: Set as 1 if you want to load pre-trained NNs.

-trainonly: Set to 1 if you want to only train NNs, and not do any of the subsequent statistical analysis.

-startk: Default 0. Which k-fold to start training at. Useful for parallelization of training. k is the index for the lowest level of nested cross-validation.

-startl: Default 0. Which l-fold to start training at. Useful for parallelization of training. l is the index for the second level of nested cross-validation.

-endk: Default 0. Which k-fold to end training at (if greater than 0). Useful for parallelization of training. k is the index for the lowest level of nested cross-validation.

-endl: Default 0. Which l-fold to end training at (if greater than 0). Useful for parallelization of training. l is the index for the second level of nested cross-validation.


#####################################################

In order to reproduce results similar to those in the paper, try:

python Train_CWoLa-Hunting_NN_ProductionCode.py -o /output_directory/prefix -bgevnts 553388 -patience 300 -batchsize 2000 -sigevnts 900 -checkeff 0.005 -bin 7 -it 20